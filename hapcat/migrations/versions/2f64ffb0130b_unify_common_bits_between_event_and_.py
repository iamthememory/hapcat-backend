"""Unify common bits between Event and Location

Revision ID: 2f64ffb0130b
Revises: abf408e456a5
Create Date: 2018-05-01 22:16:18.514808

"""
from alembic import op
import sqlalchemy as sa
import hapcat.types
import sqlalchemy_utils.types
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2f64ffb0130b'
down_revision = 'abf408e456a5'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('votable',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType, nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['uuidobject.id'], name=op.f('fk-votable-id-uuidobject-id'), ondelete='cascade'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk-votable'))
    )
    op.create_table('votable_photo',
    sa.Column('votable_id', sqlalchemy_utils.types.uuid.UUIDType, nullable=False),
    sa.Column('photo_id', sqlalchemy_utils.types.uuid.UUIDType, nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['photo.id'], name=op.f('fk-votable_photo-photo_id-photo-id'), ondelete='cascade'),
    sa.ForeignKeyConstraint(['votable_id'], ['votable.id'], name=op.f('fk-votable_photo-votable_id-votable-id'), ondelete='cascade'),
    sa.PrimaryKeyConstraint('votable_id', 'photo_id', name=op.f('pk-votable_photo'))
    )
    op.create_table('votable_tag',
    sa.Column('votable_id', sqlalchemy_utils.types.uuid.UUIDType, nullable=False),
    sa.Column('tag_id', sqlalchemy_utils.types.uuid.UUIDType, nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name=op.f('fk-votable_tag-tag_id-tag-id'), ondelete='cascade'),
    sa.ForeignKeyConstraint(['votable_id'], ['votable.id'], name=op.f('fk-votable_tag-votable_id-votable-id'), ondelete='cascade'),
    sa.PrimaryKeyConstraint('votable_id', 'tag_id', name=op.f('pk-votable_tag'))
    )
    op.drop_table('location_photo')
    op.drop_table('event_tag')
    op.drop_table('location_tag')
    op.drop_table('event_photo')
    op.drop_constraint('fk-event-id-uuidobject-id', 'event', type_='foreignkey')
    op.create_foreign_key(op.f('fk-event-id-votable-id'), 'event', 'votable', ['id'], ['id'], ondelete='cascade')
    op.drop_column('event', 'name')
    op.add_column('location', sa.Column('rawlocation_id', sqlalchemy_utils.types.uuid.UUIDType, nullable=False))
    op.drop_constraint('fk-location-id-rawlocation-id', 'location', type_='foreignkey')
    op.create_foreign_key(op.f('fk-location-id-votable-id'), 'location', 'votable', ['id'], ['id'], ondelete='cascade')
    op.create_foreign_key(op.f('fk-location-rawlocation_id-rawlocation-id'), 'location', 'rawlocation', ['rawlocation_id'], ['id'], ondelete='cascade')
    op.drop_column('location', 'name')
    op.alter_column('rawlocation', 'address',
               existing_type=sa.TEXT(),
               nullable=False)
    op.create_index(op.f('ix-rawlocation-rawlocation_address'), 'rawlocation', ['address'], unique=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix-rawlocation-rawlocation_address'), table_name='rawlocation')
    op.alter_column('rawlocation', 'address',
               existing_type=sa.TEXT(),
               nullable=True)
    op.add_column('location', sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk-location-rawlocation_id-rawlocation-id'), 'location', type_='foreignkey')
    op.drop_constraint(op.f('fk-location-id-votable-id'), 'location', type_='foreignkey')
    op.create_foreign_key('fk-location-id-rawlocation-id', 'location', 'rawlocation', ['id'], ['id'], ondelete='CASCADE')
    op.drop_column('location', 'rawlocation_id')
    op.add_column('event', sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk-event-id-votable-id'), 'event', type_='foreignkey')
    op.create_foreign_key('fk-event-id-uuidobject-id', 'event', 'uuidobject', ['id'], ['id'], ondelete='CASCADE')
    op.create_table('event_photo',
    sa.Column('event_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('photo_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], name='fk-event_photo-event_id-event-id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['photo_id'], ['photo.id'], name='fk-event_photo-photo_id-photo-id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', 'photo_id', name='pk-event_photo')
    )
    op.create_table('location_tag',
    sa.Column('location_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], name='fk-location_tag-location_id-location-id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='fk-location_tag-tag_id-tag-id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('location_id', 'tag_id', name='pk-location_tag')
    )
    op.create_table('event_tag',
    sa.Column('event_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], name='fk-event_tag-event_id-event-id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name='fk-event_tag-tag_id-tag-id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', 'tag_id', name='pk-event_tag')
    )
    op.create_table('location_photo',
    sa.Column('location_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('photo_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], name='fk-location_photo-location_id-location-id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['photo_id'], ['photo.id'], name='fk-location_photo-photo_id-photo-id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('location_id', 'photo_id', name='pk-location_photo')
    )
    op.drop_table('votable_tag')
    op.drop_table('votable_photo')
    op.drop_table('votable')
    # ### end Alembic commands ###
